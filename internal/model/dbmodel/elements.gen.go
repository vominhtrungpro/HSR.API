// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbmodel

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vominhtrungpro/internal/model/model"
)

func newElement(db *gorm.DB, opts ...gen.DOOption) element {
	_element := element{}

	_element.elementDo.UseDB(db, opts...)
	_element.elementDo.UseModel(&model.Element{})

	tableName := _element.elementDo.TableName()
	_element.ALL = field.NewAsterisk(tableName)
	_element.ID = field.NewInt32(tableName, "id")
	_element.Name = field.NewString(tableName, "name")
	_element.Picture = field.NewBytes(tableName, "picture")

	_element.fillFieldMap()

	return _element
}

type element struct {
	elementDo

	ALL     field.Asterisk
	ID      field.Int32
	Name    field.String
	Picture field.Bytes

	fieldMap map[string]field.Expr
}

func (e element) Table(newTableName string) *element {
	e.elementDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e element) As(alias string) *element {
	e.elementDo.DO = *(e.elementDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *element) updateTableName(table string) *element {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Picture = field.NewBytes(table, "picture")

	e.fillFieldMap()

	return e
}

func (e *element) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *element) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["picture"] = e.Picture
}

func (e element) clone(db *gorm.DB) element {
	e.elementDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e element) replaceDB(db *gorm.DB) element {
	e.elementDo.ReplaceDB(db)
	return e
}

type elementDo struct{ gen.DO }

type IElementDo interface {
	gen.SubQuery
	Debug() IElementDo
	WithContext(ctx context.Context) IElementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IElementDo
	WriteDB() IElementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IElementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IElementDo
	Not(conds ...gen.Condition) IElementDo
	Or(conds ...gen.Condition) IElementDo
	Select(conds ...field.Expr) IElementDo
	Where(conds ...gen.Condition) IElementDo
	Order(conds ...field.Expr) IElementDo
	Distinct(cols ...field.Expr) IElementDo
	Omit(cols ...field.Expr) IElementDo
	Join(table schema.Tabler, on ...field.Expr) IElementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IElementDo
	RightJoin(table schema.Tabler, on ...field.Expr) IElementDo
	Group(cols ...field.Expr) IElementDo
	Having(conds ...gen.Condition) IElementDo
	Limit(limit int) IElementDo
	Offset(offset int) IElementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IElementDo
	Unscoped() IElementDo
	Create(values ...*model.Element) error
	CreateInBatches(values []*model.Element, batchSize int) error
	Save(values ...*model.Element) error
	First() (*model.Element, error)
	Take() (*model.Element, error)
	Last() (*model.Element, error)
	Find() ([]*model.Element, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Element, err error)
	FindInBatches(result *[]*model.Element, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Element) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IElementDo
	Assign(attrs ...field.AssignExpr) IElementDo
	Joins(fields ...field.RelationField) IElementDo
	Preload(fields ...field.RelationField) IElementDo
	FirstOrInit() (*model.Element, error)
	FirstOrCreate() (*model.Element, error)
	FindByPage(offset int, limit int) (result []*model.Element, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IElementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e elementDo) Debug() IElementDo {
	return e.withDO(e.DO.Debug())
}

func (e elementDo) WithContext(ctx context.Context) IElementDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e elementDo) ReadDB() IElementDo {
	return e.Clauses(dbresolver.Read)
}

func (e elementDo) WriteDB() IElementDo {
	return e.Clauses(dbresolver.Write)
}

func (e elementDo) Session(config *gorm.Session) IElementDo {
	return e.withDO(e.DO.Session(config))
}

func (e elementDo) Clauses(conds ...clause.Expression) IElementDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e elementDo) Returning(value interface{}, columns ...string) IElementDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e elementDo) Not(conds ...gen.Condition) IElementDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e elementDo) Or(conds ...gen.Condition) IElementDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e elementDo) Select(conds ...field.Expr) IElementDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e elementDo) Where(conds ...gen.Condition) IElementDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e elementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IElementDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e elementDo) Order(conds ...field.Expr) IElementDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e elementDo) Distinct(cols ...field.Expr) IElementDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e elementDo) Omit(cols ...field.Expr) IElementDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e elementDo) Join(table schema.Tabler, on ...field.Expr) IElementDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e elementDo) LeftJoin(table schema.Tabler, on ...field.Expr) IElementDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e elementDo) RightJoin(table schema.Tabler, on ...field.Expr) IElementDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e elementDo) Group(cols ...field.Expr) IElementDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e elementDo) Having(conds ...gen.Condition) IElementDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e elementDo) Limit(limit int) IElementDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e elementDo) Offset(offset int) IElementDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e elementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IElementDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e elementDo) Unscoped() IElementDo {
	return e.withDO(e.DO.Unscoped())
}

func (e elementDo) Create(values ...*model.Element) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e elementDo) CreateInBatches(values []*model.Element, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e elementDo) Save(values ...*model.Element) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e elementDo) First() (*model.Element, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) Take() (*model.Element, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) Last() (*model.Element, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) Find() ([]*model.Element, error) {
	result, err := e.DO.Find()
	return result.([]*model.Element), err
}

func (e elementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Element, err error) {
	buf := make([]*model.Element, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e elementDo) FindInBatches(result *[]*model.Element, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e elementDo) Attrs(attrs ...field.AssignExpr) IElementDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e elementDo) Assign(attrs ...field.AssignExpr) IElementDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e elementDo) Joins(fields ...field.RelationField) IElementDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e elementDo) Preload(fields ...field.RelationField) IElementDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e elementDo) FirstOrInit() (*model.Element, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) FirstOrCreate() (*model.Element, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) FindByPage(offset int, limit int) (result []*model.Element, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e elementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e elementDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e elementDo) Delete(models ...*model.Element) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *elementDo) withDO(do gen.Dao) *elementDo {
	e.DO = *do.(*gen.DO)
	return e
}
